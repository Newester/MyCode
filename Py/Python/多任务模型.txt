# 多线程、多进程是实现多任务的两种主要方式
# 多任务通常采用Master-Worker模式，Master负责分配任务，Worker负责执行任务

# 多进程模式的优点是稳定性高，只有主进程崩溃才会导致连锁崩溃
# 多进程的缺点是创建进程的代价高，进程过多将影响操作系统调度

# 多线程模式的优势是比多进程模式执行更快，消耗的资源少
# 任何一个线程崩溃将导致整个进程崩溃

# 任务切换需要 保存现场（CPU寄存器状态、内存页等）、准备新环境（恢复上次的CPU寄存器状态，内存页）
# 多任务数量达到一定限度消耗掉过多的系统资源，就会导致操作系统忙于任务切换，无暇执行任务，导致任务效率急剧下降

# 计算密集型任务 --要进行大量的计算操作
# 这类任务主要消耗CPU资源，任务数量应当等于CPU核心数
# 对代码的执行效率要求高
# 适合用C/C++等执行效率高的语言

# IO密集型任务 --要进行大量读写操作
# 对CPU的消耗少，大量时间在等待IO操作完成
# 一定限度内任务越多，CPU效率越高
# 适合脚本语言

# 异步 IO
# 事件驱动模型 利用单进程/线程执行多任务
# Python协程 单线程的异步编程模型